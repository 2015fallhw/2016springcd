<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20160218180208.1"><vh>@settings</vh>
<v t="amd.20160218180208.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="amd.20160218180208.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160218180457.1"><vh>課程運作模式</vh></v>
<v t="amd.20160218183626.1" a="E"><vh>分組與座位表</vh>
<v t="leo.20160222105529.1" a="E"><vh>task 0</vh>
<v t="leo.20160225112545.1" a="E"><vh>2a</vh>
<v t="leo.20160225112545.2"><vh>@edit 2016s_g1_w1_task0.py</vh></v>
<v t="leo.20160225112545.3"><vh>@edit 2016_cd_2a_1.txt</vh></v>
<v t="leo.20160225112545.4"><vh>@edit 2016_cd_2a_2.txt</vh></v>
<v t="leo.20160225112545.5"><vh>@edit 2016_cd_2a_3.txt</vh></v>
<v t="leo.20160225112545.6"><vh>@edit 2016s_g1_w1_task0.py</vh></v>
<v t="leo.20160225112545.7"><vh>@edit 2016s_g1_w1_task0-1.py</vh></v>
<v t="leo.20160225112545.8"><vh>2a 分組執行結果 (python 程式)</vh></v>
</v>
<v t="leo.20160225112604.1"><vh>2b</vh>
<v t="leo.20160225112604.2"><vh>@edit 2016_cd_2b_1.txt</vh></v>
<v t="leo.20160225112604.3"><vh>@edit 2016_cd_2b_2.txt</vh></v>
<v t="leo.20160225112604.4"><vh>@edit 2016_cd_2b_3.txt</vh></v>
<v t="leo.20160225112604.5"><vh>@edit 2016s_g1_w1_task0_2b.py</vh></v>
<v t="leo.20160225112604.6"><vh>@edit 2016s_g1_w1_task0-1_2b.py</vh></v>
<v t="leo.20160225112604.7"><vh>2b 分組執行結果 (python 程式)</vh></v>
</v>
</v>
</v>
<v t="leo.20160222113059.1"><vh>ungit 啟動</vh></v>
<v t="amd.20160221175212.1"><vh>@edit index.html</vh></v>
</vnodes>
<tnodes>
<t tx="amd.20160218180208.1"></t>
<t tx="amd.20160218180208.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="amd.20160218180208.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="amd.20160218180457.1">收集資料, 研讀資料, 針對主題做成結論.

根據結論尋求或自行開發系統, 以便有效完成任務

每週根據主題 ,每位學員自行評分, 完成 reveal.js 的簡報

期中成績 = (個人自評 + 老師評分 / 2 ) * 出席率

期末成績 = (個人自評 + 老師評分 / 2 ) * 出席率

學期成績 = (期中成績 + 期末成績 ) / 2</t>
<t tx="amd.20160218183626.1">請各學員在 http://calc-g0v.rhcloud.com/8mxl1036dj 留下學號, 各學員每週依照固定座位上課.

各組學員下課離開前, 一定會要協同確認該組所在電腦正常關機

每週下課前各組負責清潔打掃各自的區域範圍, 每週一組輪值組則負責清潔打掃公共區域 (含 KMOL 室)

</t>
<t tx="leo.20160222105529.1">2016_cd_2a_3.txt 為本班目前在學校的修課名單

2016_cd_2a_1.txt 與 2016_cd_2a_2.txt 則為各組所填寫的分組名單

請設法按照各組先以學號遞增排序後, 分別依組序填入各排, 以便完成班級的電腦教室座次表

例如, 第一組的排序第一位同學, 學號填入第一排的第一列座位, 而第二組的排序第一位同學, 則將學號填入第一排的第二列座位, 依此類推後, 排完第十組的排序第一位同學後, 再排第一組的排序第二位同學.</t>
<t tx="leo.20160222113059.1">start.bat 後, 可以在特定的 github 倉儲內, 利用 start_ungit.bat 啟動 ungit

</t>
<t tx="leo.20160225112545.1"></t>
<t tx="leo.20160225112545.8">@language python
# spring_2a 數列即為執行 2016s_g1_w1_task0.py 之後, 所得到的 final_result 數列
# 這個數列是帶有空白字串的分組學號名單數列的組合數列
'''
分組結果: [['40023139', '40223153', '40323105', '40323106', '40323107', '40323146'], 
['40023234', '40123119', '40123141', '40123149', '40123216', '40123227', '40123255'], 
['40323101', '40323102', '40323103', '40323108', '40323124'], 
['40323109', '40323130', '40323135', '40323136', '40323138', '40323144'], 
['40323110', '40323113', '40323116', '40323121', '40323151'], 
['40323111', '40323117', '40323118', '40323119', '40323120', '40323122'], 
['40323112', '40323133', '40323147', '40323152', '40323155', '40323156'], 
['40323123', '40323131', '40323137', '40323143', '40323145', '40323154'], 
['40323125', '40323126', '40323132', '40323149', '40323150', '40323153'], 
['40323127', '40323128', '40323139', '40323141']]
'''

spring_2a =  [['40023139', '40223153', '40323105', '40323106', '40323107', '40323146'], ['40023234', '40123119', '40123141', '40123149', '40123216', '40123227', '40123255'], ['40323101', '40323102', '40323103', '40323108', '40323124'], ['40323109', '40323130', '40323135', '40323136', '40323138', '40323144'], ['40323110', '40323113', '40323116', '40323121', '40323151'], ['40323111', '40323117', '40323118', '40323119', '40323120', '40323122'], ['40323112', '40323133', '40323147', '40323152', '40323155', '40323156'], ['40323123', '40323131', '40323137', '40323143', '40323145', '40323154'], ['40323125', '40323126', '40323132', '40323149', '40323150', '40323153'], ['40323127', '40323128', '40323139', '40323141']]

# 第 i 組學號數列 為 spring_2a[i-1], i 從 1 到 10 共有 10 組
# 若要先照排依組序排座位, 且空字串由下一組可用學號補上
# 以排為先, 然後列, 共有 9 排 7 列可以排座位

seat_by_column = []
for row in range(7):
    for column in range(10):
        # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
        try:
            seat_by_column.append(spring_2a[column][row])
        except:
            seat_by_column.append("")

g.es("去除空白字串前的座位數列:", seat_by_column)

'''
去除空白字串前的座位數列: ['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112', '40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130', '40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105', '40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137', '40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121', '40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216', '40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150', '', '40323146', '40123227', '', '40323144', '', '40323122', '40323156', '40323154', '40323153', '', '', '40123255', '', '', '', '', '', '', '', '']
'''

# 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序

seat_by_column = list(filter(None, seat_by_column))
g.es("以排為主的座位數列:", seat_by_column)

'''
以排為主的座位數列: ['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112', '40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130', '40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105', '40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137', '40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121', '40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216', '40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150', '40323146', '40123227', '40323144', '40323122', '40323156', '40323154', '40323153', '40123255']
'''

# 然後每 7 個取為 1 排, 即可得到以排為主的座位序列

N = 7
column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
g.es("每 7 個組員一排的數列:", column_list)

'''
# 以排為主, 將 seat_by_column 數列, 以每 7 個一排, 組成座位數列
# (1,1), (1, 2) to (9, 1)
每 7 個組員一排的數列: 
[['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112'], 
['40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130'], 
['40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105'], 
['40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137'], 
['40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121'], 
['40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216'], 
['40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150'], 
['40323146', '40123227', '40323144', '40323122', '40323156', '40323154', '40323153'], 
['40123255']]
# 若要轉換為以 row 為主的電腦教室數列, 以方便 html table 處理, 則需要利用 zip 進行 transpose
# (9,1)-&gt;(1,1), (8,1)-&gt;(1,2) ... (1,1)-&gt;(1,9)
'''

# dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
#g.es(column_list[::-1])

# 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列) 列數補上空白字串 (也就是空位)
# 所以不能使用 zip, 而必須導入 zip_longest 模組方法

from itertools import zip_longest

# zip list of lists, 特別注意下列 column_list 前方的 *

'''
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: 

https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
'''

spring_2a_final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
g.es(spring_2a_final_seat)

'''
# 最後得到的結果, 可以利用 html table 顯示在網頁上, 也就是以列為主的座位名單數列
[('40123255', '40323146', '40323124', '40323119', '40323132', '40123141', '40323113', '40323123', '40023139'), 
('', '40123227', '40323138', '40323152', '40323139', '40323103', '40323117', '40323125', '40023234'), 
('', '40323144', '40323151', '40323143', '40323106', '40323135', '40323133', '40323127', '40323101'), 
('', '40323122', '40323120', '40323149', '40123149', '40323116', '40323131', '40223153', '40323109'), 
('', '40323156', '40323155', '40323141', '40323108', '40323118', '40323126', '40123119', '40323110'), 
('', '40323154', '40323145', '40323107', '40323136', '40323147', '40323128', '40323102', '40323111'), 
('', '40323153', '40323150', '40123216', '40323121', '40323137', '40323105', '40323130', '40323112')]
'''


</t>
<t tx="leo.20160225112604.1"></t>
<t tx="leo.20160225112604.7">@language python
# spring_2b 數列即為執行 2016s_g1_w1_task0_2b.py 之後, 所得到的 final_result 數列
# 這個數列是帶有空白字串的分組學號名單數列的組合數列
# readlines() 會以每一行資料當作一個字串, 作為 element, 並輸出一個數列資料
result = []
with open("2016_cd_2b_3.txt", 'r') as f:
    content = f.readlines()
    #g.es(content)
    #g.es(len(content))
    # 逐 element 處理
    for i in range(len(content)):
        for line in content[i].splitlines():
            #g.es(content[i].splitlines())
            result.append(list(line.split(",")))
# result element 即為各分組的學員學號數列資料
# 這裡要先以遞增排序處理各組的數列
group_sorted = []
for i in range(len(result)):
    group_list = sorted(list(filter(None, result[i])))
    group_sorted.append(group_list)
#g.es("各組已經過遞增排序, 各組第一位即為組長:", group_sorted)
# 利用 sorted(), 對全班各組數列所組成的數列進行遞增排序
final_result = sorted(group_sorted)
g.es("分組結果:", final_result)

'''
分組結果: [['40123126', '40123129', '40123131', '40123133', '40123134', '40123144', '40123156'], 
['40123202', '40123214', '40123217', '40123226', '40123232', '40123235', '40123244'], 
['40123224', '40123239', '40123242', '40123250', '40323234', '40323238'], 
['40323201', '40323202', '40323203', '40323205', '40323208'], 
['40323204', '40323206', '40323217', '40323251', '40323253', '40323255'], 
['40323210', '40323211', '40323215', '40323220', '40323235', '40323248'], 
['40323212', '40323216', '40323219', '40323236', '40323254', '40323256'], 
['40323213', '40323226', '40323229', '40323237', '40323239', '40323242', '40323244'], 
['40323214', '40323218', '40323230', '40323231', '40323232', '40323233', '40323250'], 
['40323222', '40323227', '40323241', '40323243', '40323249', '40328242', '40328245'], 
['40323223', '40323225', '40323240', '40323245', '40323247', '40323252']]
'''

spring_2b =  final_result

# 第 i 組學號數列 為 spring_2a[i-1], i 從 1 到 11 共有 11 組
# 若要先照排依組序排座位, 且空字串由下一組可用學號補上
# 以排為先, 然後列, 共有 9 排 8 列可以排座位

seat_by_column = []
for row in range(7):
    for column in range(11):
        # 因為各分組數列的長度並不相同, 但是最長的有 8 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
        try:
            seat_by_column.append(spring_2b[column][row])
        except:
            seat_by_column.append("")

g.es("去除空白字串前的座位數列:", seat_by_column)

'''
去除空白字串前的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '', '', '', '', '', '40323244', '40323250', '40328245', '']
'''

# 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序

seat_by_column = list(filter(None, seat_by_column))
g.es("以排為主的座位數列:", seat_by_column)

'''
以排為主的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '40323244', '40323250', '40328245']
'''

# 然後每 8 個取為 1 排, 即可得到以排為主的座位序列

N = 8
column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
g.es("每 8 個組員一排的數列:", column_list)

'''
# 以排為主, 將 seat_by_column 數列, 以每 8 個一排, 組成座位數列
# (1,1), (1, 2) to (9, 1)
每 8 個組員一排的數列: 
[['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213'], 
['40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206'], 
['40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217'], 
['40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241'], 
['40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236'], 
['40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208'], 
['40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144'], 
['40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242'], 
['40323252', '40123156', '40123244', '40323244', '40323250', '40328245']]
# 若要轉換為以 row 為主的電腦教室數列, 以方便 html table 處理, 則需要利用 zip 進行 transpose
# (9,1)-&gt;(1,1), (8,1)-&gt;(1,2) ... (1,1)-&gt;(1,9)
'''

# dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
#g.es(column_list[::-1])

# 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列) 列數補上空白字串 (也就是空位)
# 所以不能使用 zip, 而必須導入 zip_longest 模組方法

from itertools import zip_longest

# zip list of lists, 特別注意下列 column_list 前方的 *

'''
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: 

https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
'''

spring_2b_final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
g.es(spring_2b_final_seat)

'''
# 最後得到的結果, 可以利用 html table 顯示在網頁上, 也就是以列為主的座位名單數列
[['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213'], 
['40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206'], 
['40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217'], 
['40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241'], 
['40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236'], 
['40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208'], 
['40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144'], 
['40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242'], 
['40323252', '40123156', '40123244', '40323244', '40323250', '40328245']]
'''


</t>
</tnodes>
</leo_file>
