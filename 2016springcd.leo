<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20160218180208.1"><vh>@settings</vh>
<v t="amd.20160218180208.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="amd.20160218180208.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160218180457.1"><vh>課程運作模式</vh></v>
<v t="amd.20160218183626.1"><vh>分組與座位表</vh>
<v t="leo.20160222105529.1"><vh>task 0</vh>
<v t="leo.20160225112545.1" a="E"><vh>2a</vh>
<v t="leo.20160225112545.2"><vh>@edit 2016s_g1_w1_task0.py</vh></v>
<v t="leo.20160225112545.3"><vh>@edit 2016_cd_2a_1.txt</vh></v>
<v t="leo.20160225112545.4"><vh>@edit 2016_cd_2a_2.txt</vh></v>
<v t="leo.20160225112545.5"><vh>@edit 2016_cd_2a_3.txt</vh></v>
<v t="leo.20160225112545.6"><vh>@edit 2016s_g1_w1_task0.py</vh></v>
<v t="leo.20160225112545.7"><vh>@edit 2016s_g1_w1_task0-1.py</vh></v>
<v t="leo.20160225112545.8"><vh>2a 分組執行結果 (python 程式)</vh></v>
<v t="amd.20160302181746.1"><vh>@edit 2a_2016spring.html</vh></v>
<v t="amd.20160302182008.1"><vh>列出依學號排序的組的座位表</vh></v>
</v>
<v t="leo.20160225112604.1" a="E"><vh>2b</vh>
<v t="leo.20160225112604.2"><vh>@edit 2016_cd_2b_1.txt</vh></v>
<v t="leo.20160225112604.3"><vh>@edit 2016_cd_2b_2.txt</vh></v>
<v t="leo.20160225112604.4"><vh>@edit 2016_cd_2b_3.txt</vh></v>
<v t="leo.20160225112604.5"><vh>@edit 2016s_g1_w1_task0_2b.py</vh></v>
<v t="leo.20160225112604.6"><vh>@edit 2016s_g1_w1_task0-1_2b.py</vh></v>
<v t="leo.20160225112604.7"><vh>2b 分組執行結果 (python 程式)</vh></v>
<v t="leo.20160225113228.1"><vh>2b 分組執行結果</vh></v>
<v t="amd.20160302181804.1"><vh>@edit 2b_2016spring.html</vh></v>
<v t="amd.20160302182124.1"><vh>列出依學號排序的組的座位表</vh></v>
</v>
</v>
</v>
<v t="leo.20160222113059.1"><vh>ungit 啟動</vh></v>
<v t="amd.20160307212303.1"><vh>@edit .gitignore</vh></v>
<v t="amd.20160305213555.1"><vh>Github 協同</vh>
<v t="amd.20160305223955.1"><vh>可攜 Portable SourceTree 製作</vh></v>
</v>
<v t="amd.20160305232735.1"><vh>參考</vh></v>
<v t="amd.20160305233001.1"><vh>Git 開發</vh></v>
<v t="amd.20160302205550.1" a="E"><vh>網際程式</vh>
<v t="amd.20160302211200.1"><vh>@path chat</vh>
<v t="amd.20160302211806.1"><vh>@edit requirements.txt</vh></v>
<v t="amd.20160302211826.1"><vh>@edit app.py</vh></v>
<v t="amd.20160302211843.1"><vh>@path templates</vh>
<v t="amd.20160302211854.1"><vh>@edit index.html</vh></v>
</v>
<v t="amd.20160302211905.1" a="E"><vh>@path static</vh>
<v t="amd.20160302211915.1"><vh>@edit style.css</vh></v>
</v>
</v>
</v>
<v t="amd.20160221175212.1"><vh>@edit index.html</vh></v>
<v t="amd.20160303214338.1" a="E"><vh>Flask 程式 (openshift)</vh>
<v t="amd.20160303220357.1"><vh>Ubuntu 使用 Filezilla</vh></v>
<v t="amd.20160303214413.1"><vh>@edit setup.py</vh></v>
<v t="amd.20160303214434.1"><vh>@edit wsgi.py</vh></v>
<v t="amd.20160303214445.1" a="E"><vh>@clean myflaskapp.py</vh>
<v t="amd.20160303214445.3"><vh>index</vh></v>
<v t="amd.20160303214445.4"><vh>user</vh></v>
<v t="amd.20160303214445.6"><vh>red</vh></v>
<v t="amd.20160303214445.7"><vh>guessform</vh></v>
<v t="amd.20160303214445.8"><vh>docheck</vh></v>
<v t="amd.20160307203803.1"><vh>option</vh></v>
<v t="amd.20160307204546.1"><vh>optionaction</vh></v>
</v>
<v t="amd.20160303223009.1" a="E"><vh>@path templates</vh>
<v t="amd.20160303223009.2"><vh>@edit index.html</vh></v>
<v t="amd.20160303223009.4"><vh>@edit guessform.html</vh></v>
<v t="amd.20160303223009.5"><vh>@edit docheck.html</vh></v>
<v t="amd.20160303223009.6"><vh>@edit toobig.html</vh></v>
<v t="amd.20160303223009.7"><vh>@edit toosmall.html</vh></v>
<v t="amd.20160307204531.1"><vh>@edit optionaction.html</vh></v>
<v t="amd.20160307203946.1"><vh>@edit option.html</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20160218180208.1"></t>
<t tx="amd.20160218180208.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="amd.20160218180208.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="amd.20160218180457.1">收集資料, 研讀資料, 針對主題做成結論.

根據結論尋求或自行開發系統, 以便有效完成任務

每週根據主題 ,每位學員自行評分, 完成 reveal.js 的簡報

期中成績 = (個人自評 + 老師評分 / 2 ) * 出席率

期末成績 = (個人自評 + 老師評分 / 2 ) * 出席率

學期成績 = (期中成績 + 期末成績 ) / 2</t>
<t tx="amd.20160218183626.1">請各學員在 http://calc-g0v.rhcloud.com/8mxl1036dj 留下學號, 各學員每週依照固定座位上課.

各組學員下課離開前, 一定會要協同確認該組所在電腦正常關機

每週下課前各組負責清潔打掃各自的區域範圍, 每週一組輪值組則負責清潔打掃公共區域 (含 KMOL 室)

</t>
<t tx="amd.20160302182008.1">('40023139', (0, 0))
('40023234', (0, 1))
('40123119', (1, 4))
('40123141', (3, 0))
('40123149', (4, 3))
('40123216', (5, 6))
('40123227', (7, 1))
('40123255', (8, 0))
('40223153', (1, 3))
('40323101', (0, 2))
('40323102', (1, 5))
('40323103', (3, 1))
('40323105', (2, 6))
('40323106', (4, 2))
('40323107', (5, 5))
('40323108', (4, 4))
('40323109', (0, 3))
('40323110', (0, 4))
('40323111', (0, 5))
('40323112', (0, 6))
('40323113', (2, 0))
('40323116', (3, 3))
('40323117', (2, 1))
('40323118', (3, 4))
('40323119', (5, 0))
('40323120', (6, 3))
('40323121', (4, 6))
('40323122', (7, 3))
('40323123', (1, 0))
('40323124', (6, 0))
('40323125', (1, 1))
('40323126', (2, 4))
('40323127', (1, 2))
('40323128', (2, 5))
('40323130', (1, 6))
('40323131', (2, 3))
('40323132', (4, 0))
('40323133', (2, 2))
('40323135', (3, 2))
('40323136', (4, 5))
('40323137', (3, 6))
('40323138', (6, 1))
('40323139', (4, 1))
('40323141', (5, 4))
('40323143', (5, 2))
('40323144', (7, 2))
('40323145', (6, 5))
('40323146', (7, 0))
('40323147', (3, 5))
('40323149', (5, 3))
('40323150', (6, 6))
('40323151', (6, 2))
('40323152', (5, 1))
('40323153', (7, 6))
('40323154', (7, 5))
('40323155', (6, 4))
('40323156', (7, 4))</t>
<t tx="amd.20160302182124.1">('40123126', (0, 0))
('40123129', (1, 3))
('40123131', (2, 6))
('40123133', (4, 1))
('40123134', (5, 4))
('40123144', (6, 7))
('40123156', (8, 1))
('40123202', (0, 1))
('40123214', (1, 4))
('40123217', (2, 7))
('40123224', (0, 2))
('40123226', (4, 2))
('40123232', (5, 5))
('40123235', (7, 0))
('40123239', (1, 5))
('40123242', (3, 0))
('40123244', (8, 2))
('40123250', (4, 3))
('40323201', (0, 3))
('40323202', (1, 6))
('40323203', (3, 1))
('40323204', (0, 4))
('40323205', (4, 4))
('40323206', (1, 7))
('40323208', (5, 7))
('40323210', (0, 5))
('40323211', (2, 0))
('40323212', (0, 6))
('40323213', (0, 7))
('40323214', (1, 0))
('40323215', (3, 3))
('40323216', (2, 1))
('40323217', (3, 2))
('40323218', (2, 3))
('40323219', (3, 4))
('40323220', (4, 6))
('40323222', (1, 1))
('40323223', (1, 2))
('40323225', (2, 5))
('40323226', (2, 2))
('40323227', (2, 4))
('40323229', (3, 5))
('40323230', (3, 6))
('40323231', (5, 1))
('40323232', (6, 4))
('40323233', (7, 6))
('40323234', (5, 6))
('40323235', (6, 1))
('40323236', (4, 7))
('40323237', (5, 0))
('40323238', (7, 1))
('40323239', (6, 3))
('40323240', (4, 0))
('40323241', (3, 7))
('40323242', (7, 5))
('40323243', (5, 2))
('40323244', (8, 3))
('40323245', (5, 3))
('40323247', (6, 6))
('40323248', (7, 3))
('40323249', (6, 5))
('40323250', (8, 4))
('40323251', (4, 5))
('40323252', (8, 0))
('40323253', (6, 0))
('40323254', (6, 2))
('40323255', (7, 2))
('40323256', (7, 4))
('40328242', (7, 7))
('40328245', (8, 5))</t>
<t tx="amd.20160302205550.1">https://github.com/aidancrane/ChatBox

http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

https://github.com/sirkaiserkai/Flask-SocketIO-Chat.git</t>
<t tx="amd.20160302211200.1">https://github.com/sirkaiserkai/Flask-SocketIO-Chat.git</t>
<t tx="amd.20160302211843.1"></t>
<t tx="amd.20160302211905.1"></t>
<t tx="amd.20160303214338.1">在近端的 repository 中, 新增與 URLofOpenshift_site 對應的 openshift 倉儲, 名稱為 openshift

git remote add openshift URLofOpenshift_site

git add -A

git commit -m ""

將 gh-pages 分支資料推向 origin 

git push origin gh-pages

將資料推向 openshift

git push openshift

與 2016springcd 倉儲對應的 Openshift 網站:

http://cd-2015fallhw.rhcloud.com/</t>
<t tx="amd.20160303214445.1">@language python
# coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random

app = Flask(__name__)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

@others

if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20160303214445.3">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)


</t>
<t tx="amd.20160303214445.4">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)</t>
<t tx="amd.20160303214445.6">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")</t>
<t tx="amd.20160303214445.7">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)</t>
<t tx="amd.20160303214445.8">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 </t>
<t tx="amd.20160303220357.1">ssh-add ~/.ssh/id_rsa

Windows: puttygen.exe</t>
<t tx="amd.20160303223009.1"></t>
<t tx="amd.20160305213555.1">git rebase 與 git merge 差別

https://git-scm.com/book/zh-tw/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88

git rebase 可以把在一個分支裡提交的改變移到另一個分支裡重放一遍</t>
<t tx="amd.20160305223955.1">可攜 SourceTree 製作方法:

https://github.com/cosmomill/SourceTreePortable

SourceTree 允許非商用戶可以免費使用, 原始下載網址: https://www.sourcetreeapp.com/

之所以需要 SourceTree 的原因是 ungit 無法處理資料眾多的倉儲版本管理流程, 因此較大的專案建議使用 SourceTree

由於 SourceTree 要求非商用戶必須利用 email 各自登記註冊, 因此各用戶必須自行依據 https://github.com/cosmomill/SourceTreePortable 中的說明製作
</t>
<t tx="amd.20160305232735.1">主題: 設計工程師的特質
Guest	xx Message 375 - 設計工程師的特質
On: 2013 11 21 8:42:11
希望你們每位都能夠像今天這樣積極看待每件與學習有關的事物, 上課之前先根據課程內容搜尋資料, 上課時要認真聽每一位老師所傳授的內容, 下課後再根據課程重點, 思考一下這些內容到底有何用處, 課程間該如何整合與通盤了解.

學習是一件快樂的事, 也是現代人終其一生都必須要積極以對的事, 但是學習與思考必須要齊頭並進, 也就是要手腦並重, 了解各項規定與約束條件後再放手執行, 相信如此, 你們不久之後就會成為人見人愛的XX設計工程師.

XX設計工程師的特質:

1. 對於週遭事物有一定的敏感度, 願意了解問題, 並樂於尋求問題解答.

2. 能夠與任何專業領域的成員合作, 可領導產品開發團隊以協同模式解決問題.

3. 律己甚嚴, 要充分了解各項設計規條與限度後, 成為產品開發團隊中的主角.

4. 能充分以各種方式(口語, 圖面, 影音, 文字, 虛擬與實體模型)表達自己對某一層面設計的想法.

5. 能夠運用理論分析驗證產品設計效能.

Message 378 - Re: 設計工程師的特質 - Git 與未來前途
On: 2013 11 24 8:57:32
前言

一: Git 與 id_rsa 之間驗證的關係.

二: 技職體系學生的自我內容管理?

先看第一個問題:

1. Git 在編寫的時候, 一定會內建讀 id_rsa 檔案的所在位置, 假如您可以將 id_rsa 放到 Git 目錄下而通過權限驗證, 最大的可能就是, Git 會先檢查所屬目錄下的 .ssh 然後在其下找 id_rsa, 若沒有, 則不再從使用者的 "HOME" 中尋找 .ssh 下的 id_rsa.

可以檢查一下 start_KMOL.bat 是否真的將 HOME 設到 V:\home 目錄下, 然後將 GIT 下的 .ssh 刪除, 再啟動 portableKMOL 後, 看 GIT 是否會從 V:\home\.ssh 目錄下找 id_rsa 檔案作為驗證依據.

參考:

https://help.github.com/articles/generating-ssh-keys

http://serverfault.com/questions/194567/how-to-i-tell-git-for-windows-where-to-find-my-private-rsa-key

2. 你所碰到的問題其實很寶貴, 因為若能找到確實發生問題的原因, 從而解決先前的問題, 就應該窮追到根源, 然後下一個最後結論, 若要完全弄清楚 GIT 與 ssh 之間的互動, 除了看手冊與網路上搜尋問題外, 最後一條路就是找兩套系統的原始碼出來看:-)

第二個問題:

1. 有關所讀的內容有無興趣, 我的答案是, 工程師對於所屬專業, 在求學階段只要不討厭就可以, 因為往後就業的內容其實與所學間的關係, 並不是非常絕對, 也就是說, 即使您從機械設計系畢業, 爾後的工作可能是業務, 設計繪圖, 設計分析, 品質確保, 原型驗證, 製造支援, 也可能直接投入製程配置或設備維修, 這些工作根源相同, 但是每一項工作的主體需求都有很大的差別, 從中一定可以找到你最有興趣的項目.

2. 畢業之後要做甚麼?

有關這點更是海闊天空, 目前根本無法回答, 但是有一個原則, 大學畢業後是否繼續唸研究所, 倒是目前就可以決定的, 假如您對未來幾年的機械設計課程都能夠應付妥當, 那麼就可以從中選一個比較不討厭的項目, 設法繼續唸碩士班, 主要目的在於提高就業的能見度, 因為台灣碩士以上人力比例實在太高, 大學以下學歷的專業工程師, 通常能見度較低, 必須很努力才能往上爬.

3. 有關技職體系的內容

我一直覺得台灣並沒有將技職體系的定位弄好, 長久以來, 進入技職體系的學生有很高比例都是因為學科表現較差而來, 但是隨後的相關教育內容並沒有將學科與動手驗證這兩項給教好, 大多數高職只是一味強調動手的部分, 而視國文, 英文, 數學, 物理與化學等學科於無物, 不僅如此, 高職的生活教育資源與美育引導也遠不如普通高中, 最後導致有較高比例的高職生只會動手作一些意義不高, 而且無法永續整合的內容, 導致這些學生進入科技大學之後, 仍然無法享受到手腦合一的樂趣, 即使進入業界, 也有許多人只能被迫填補到就業發展較差的藍領工作而無永續發展.

最後, 我可能無法明確告訴你畢業之後可以從事哪一種工作, 但是我可以從老師過去就學時所得到的經驗給你一些參考:

a. 我在求學階段從來不設想未來要做甚麼, 只要求盡力將手邊的每一件事做好, 其中當然包括學科, 個人興趣以及對於自我能力的訓練等.

一旦努力讀課業內容之後, 發現應付課業並不困難, 於是留下很多時間可以看課外內容, 然後從課外內容來連結課堂上所學的項目, 自我想像這些內容可以解決哪些問題, 然後從中得到樂趣.

長年這樣做的結果, 可以開發自己的能力, 讓自己有高效能的學習能力, 每到一個不同階段, 這些能力與想像若能實現, 您就會發現, 在工作的約束範圍中, 仍有許多自我可以改造與控制的項目, 最後結果就不再是"我能做甚麼?", 而是"我想做甚麼", 也就是問題會從漫無邊際的申論題, 變成有明確選項的議題, 而且是讓您自由選擇, 因為能做的事情與項目實在太多了:-)

b. 永遠不要低估自己,  要不斷地挑戰自己的極限, 唯一要注意的是養成良好的生活習慣, 每天以正確的人生觀砥礪自己(活著不僅為自己, 還要為周遭的人服務), 要保持好自己的體能, 讓每天的自己都很清醒地解決問題.

c. 要能隨時站得出來, 發表自己對於任何項目的看法與論述, 老師過去是看紙本的百科全書, 現在的你們應該可以從網路找到許多有用的資料.</t>
<t tx="amd.20160305233001.1">Git 10 週年，Linux 之父談他是怎麼在 10 天內開發完成
 by: 伯樂在線 2015-04-09 Github、Linux、工程師
【伯樂在線導讀】：十年前的這一周，Linux 內核開發社區正面臨嚴峻的挑戰：他們不能繼續使用 BitKeeper 了（伯樂在線注：原因是當時 Bitkeeper 著作權所有者決定收回授權，內核開發團隊與其協商無果），而又沒有其他的 SCM （Software Configuration Management）可滿足他們的分佈式系統的需求。

Linux 之父 Linus Torvalds 接受了這個挑戰，決定開發一個新的版本控制系統。週末他消失了，新的一周，Git 問世了。今天，Git 已經成為上萬個項目的版本控制系統，並且在工程師中引發了開源熱潮。（TO 注：像 GitHub 就是用 Git 搭建的）

為了慶祝里程碑式的一刻，Linux 基金會邀請了 Linus 來分享 Git 背後的故事，以及他對 Git 在軟體開發中的影響的觀點。

Q：你為什麼要開發 Git？
我從來沒有想過去做版本控制軟體，因為在我看來那是電腦世界裡最無聊的事了（如果數據庫除外的話 ;^），我天生就不喜歡 SCM，但是 Bitkeeper 的誕生改變了我對版本控制的認識。

BK 在大多數方面是正確的，在本地保存一個倉庫的副本，分佈式合併確實是一大創新。這個分佈式版本控制的創新完美地解決了 SCM 的通病：「誰可以修改代碼」的難題。BK 告訴我們，你只要給每個人一個倉庫，問題就解決了。但是 BK 也存在一些問題，技術上的問題（例如重命名很麻煩）還不算什麼，它最大的壞處是不開源，很多人因為這個不使用它。

所以即使我們有幾個核心維護者使用 BK——開源項目可以免費使用——但它也沒有普及。雖然它幫助過我們開發內核，但依然有不少痛點沒有解決。

當 Tridge 違反 BK 的使用協議反編譯 BK 的時候，我們到達了緊急關頭。我花了幾個週（還是幾個月來著？）試圖調解 Tridge 和 Larry McVoy （伯樂在線注：他是 Bitkeeper 的老大），最後也沒有成功。我意識到我不能繼續使用 BK 了，但我真的不想回到沒有 BK 的黑暗時代。

遺憾的是，我們想用其他 SCM 來代替它，卻沒有找到能在遠程方面工作得好的。現有的軟體不能滿足我對遠程方面的需求，我又擔心整個流程和代碼的完整性，所以最後我決定自己寫一個。

Q：你怎麼做到的？整個週末都在熬夜寫這個，還是只用了常規的時間？
呵呵，其實可以在 Git 的源代碼倉庫中看它是如何成型的。

除了第一天的工作，因為我花了一天的時間進入「自舉 (self-hosting)」。之後我就能使用 Git 向 Git 自己提交代碼了，雖然第一天所有的東西都不是明確的，但是大體上也都在那裡了。雖然這些工作大多是在白天完成的，但也有時候工作到了深夜，甚至有兩天到了凌晨兩點。

最有趣的部分是如何將它快速成型。Git 樹中的第一次提交沒有太多代碼，但是它的基本功能已經實現了 —— 向它自己提交代碼。這部分寫代碼並不難，難的是如何組織數據。

所以我想強調的是，雖然它在短短十天內就完成了（我第一次使用 Git 向內核提交代碼的時間），但是這並不是某種「馬拉松」式的開發。事實上，我早期的開發成本很低，這取決於基本的思路正確。在這個項目開始之前，我想了很久，我總結了很多別人犯過的錯誤，然後極力避免了。

Q：Git 達到了你的期望嗎？你估計一下它現在工作得如何？它還有什麼不足嗎？
我對 Git 很滿意。它工作得相當出色，滿足了我的所有需求。有趣的是，它還接手了很多其他項目，它成長地相當迅速。在切換版本控制系統中有很多惰性，看看 CVS 和 RCS 這些堅持了這麼久就知道了。不過等時機到了，Git 早晚都會接管過來。

Q：你覺得為什麼它會被如此廣泛地接受？
我提過以前我為什麼痛恨 SCM，我相信很多人也為相同的問題煩惱過。很多項目要改一兩個小地方就會使人抓狂。

在 Git 之前，沒有東西來真正解決這個問題。人們不清楚分佈式的重要性， 可能還會與此抗爭。一旦他們明白它支持的方便可靠的備份，並允許做私人的測試倉庫，而不必擔心有無中央存儲倉庫的權限的話，他們就永遠不會放棄 Git 了。

Q：Git 會永遠流行嗎？還是你預見在將來的十年會有另一種版本控制系統？作者會是你嗎？
我不會是唯一一個作者，將來我們也可能使用另一種工具，但是我敢保證，它一定和 Git 非常像（git-like）。我不是說 Git 的什麼都是對的，但它的基本路線是對的，之前其他 SCM 未曾嘗試過。

沒有假謙虛:)

Q：為什麼 Git 能在 Linux 上工作地這麼好呢？
很顯然，Git 最初是為我們的工作流程設計的，所以這是它的一部分。雖然我重複「分佈式」這個詞很多次了，但這不為過。它被設計為足以高效地應付像 Linux 一樣的大項目，它也用於完成 Git 之前人們覺得「艱難」的事情——因為這些事我每天都要做。

舉個例子吧：在大多數的 SCM 中，「merging」操作都被認為是痛苦而且艱難的事情。你需要計劃好你的合併操作，因為這涉及到很多繁瑣的細節。這我不能接受，因為我每天要做幾十次合併，即使這樣，最大的麻煩還不是合併本身，而是測試結果。「Git」的合併只需要幾秒鐘，寫合併註釋反而會花去我更多的時間。

所以 Git 基本上是為了滿足我的需求來寫的。

Q：人們說 Git 是為聰明人設計的，即使 Andrew Morton 也說「Git 的明確設計讓你感覺你比你想像中的要蠢。」你對此的回應是什麼呢？
我覺得曾經可能是這樣的，但現在不再是了。人們這麼想可能會有很多原因，但只有一個站得住腳，很簡單：「在 Git 中完成一件事你有太多的方法。」

使用 Git 你可以做很多事，大多數「你應該怎樣」的規則，其實並不是技術上的限制，而是建議，這樣你和別人一起工作的時候可以配合得更好。

Git 是一個強大的工具，但是你不能因為這個望而卻步。雖然你可以每次用不同的方法完成相同的事情，但在多數情況下，學習 Git 的最好方法還是從最基本的事情做起。直到你熟悉基本操作了，再去接觸別的東西。

Git 給人復雜的印像有一些歷史原因。其中一個是，它很早之前確實是複雜的。一開始需要使用 Git 來做內核方面的工作的時候，人們要配置一些腳本。那時候的工作主要集中於讓核心模塊工作，花在易用性方面的精力很少。所以很顯然，Git 因其複雜性著稱，但那大約還是頭一年的事了。

人們認為 Git 難的原因是 Git 的與眾不同。很多人用過十幾二十年的 CVS，但 Git 並不是 CVS，一點都不像。概念不同，命令也不同。Git 從來沒有考慮過要像 CVS，甚至大行反道。所以如果你使用 CVS 之類的系統很長時間，就會覺得 Git 複雜，而且它的差異毫無必要。人們會對版本號碼感到奇怪。為什麼 Git 的版本不像 CVS 的「1.3.1」這種遞增式的數字？為什麼會是恐怖的四十位 Hex 碼？

但 Git 的不同並不是「毫無必要的」。只是這點讓人們覺得它太複雜了，因為它來自一個不同的背景。「CVS」的背景過時了。現在很多工程師從沒用過 CVS，如果他們學 CVS，可能覺得 CVS 的方式太詭異了，因為他們最先學的 Git。

Q：如果沒有 Git，Linux 內核會發展的像現在這樣好嗎？為什麼？
「沒有 Git」，好吧，但是一定會有別人寫出來個像 Git 的工具，一個分佈式版本控制系統。毫無疑問，我們需要「Git」這樣的東西。

Q：你怎麼看待 Github ？
Github 是非常棒的代碼託管服務，對此我沒有任何反對。我的抱怨主要是因為它作為一個開發平台——提交代碼，pull request，跟踪問題等等——不夠好。不適用於內核之類的項目。限制太多了。

部分原因是，因為內核發展的原因，部分是因為 Github 的接口很鼓勵壞習慣。在 Github 的提交有不好的提交信息等等，就是因為接口的問題。他們確實做了改善，可能現在好點了，可是永遠不會適用於 Linux 內核這樣的項目。

Q：你見過的用 Git/Github 做的最有趣的事情是什麼？
看到創建一個新項目能如此簡單，我很開心。以前搞代碼託管很痛苦的，但現在用 Git/Github ，創建一個小項目就小菜一碟了。你的項目是什麼並不重要，重要的是你可以做得到。

Q：你現在有什麼精彩的項目嗎？有什麼將推動軟體發展的軟體嗎？
暫時沒有，如果有的話，我會告訴你。</t>
<t tx="amd.20160307203803.1">@app.route('/option', methods=["GET", "POST"])
def option():
    option_list1 = ["1", "2", "3", "4"]
    option_list2 = ["a", "b"]

    return render_template('option.html', option_list1=option_list1, option_list2=option_list2)</t>
<t tx="amd.20160307204546.1">@app.route('/optionaction', methods=['POST'])
def optionaction():
    # 這裡將根據使用者所選擇的選項值, 來進行後續的設計運算
    return request.form["option1"] + ":" + request.form["option2"]
    # 等運算或資料處理結束後, 再將相關值送到對應的 template 進行資料的展示
    #return render_template('optionaction.html', option_list1=option_list1, option_list2=option_list2)
    </t>
<t tx="leo.20160222105529.1">2016_cd_2a_3.txt 為本班目前在學校的修課名單

2016_cd_2a_1.txt 與 2016_cd_2a_2.txt 則為各組所填寫的分組名單

請設法按照各組先以學號遞增排序後, 分別依組序填入各排, 以便完成班級的電腦教室座次表

例如, 第一組的排序第一位同學, 學號填入第一排的第一列座位, 而第二組的排序第一位同學, 則將學號填入第一排的第二列座位, 依此類推後, 排完第十組的排序第一位同學後, 再排第一組的排序第二位同學.</t>
<t tx="leo.20160222113059.1">start.bat 後, 可以在特定的 github 倉儲內, 利用 start_ungit.bat 啟動 ungit

</t>
<t tx="leo.20160225112545.1"></t>
<t tx="leo.20160225112545.8">@language python
# spring_2a 數列即為執行 2016s_g1_w1_task0.py 之後, 所得到的 final_result 數列
# 這個數列是帶有空白字串的分組學號名單數列的組合數列
'''
分組結果: [['40023139', '40223153', '40323105', '40323106', '40323107', '40323146'], 
['40023234', '40123119', '40123141', '40123149', '40123216', '40123227', '40123255'], 
['40323101', '40323102', '40323103', '40323108', '40323124'], 
['40323109', '40323130', '40323135', '40323136', '40323138', '40323144'], 
['40323110', '40323113', '40323116', '40323121', '40323151'], 
['40323111', '40323117', '40323118', '40323119', '40323120', '40323122'], 
['40323112', '40323133', '40323147', '40323152', '40323155', '40323156'], 
['40323123', '40323131', '40323137', '40323143', '40323145', '40323154'], 
['40323125', '40323126', '40323132', '40323149', '40323150', '40323153'], 
['40323127', '40323128', '40323139', '40323141']]
'''

spring_2a =  [['40023139', '40223153', '40323105', '40323106', '40323107', '40323146'], ['40023234', '40123119', '40123141', '40123149', '40123216', '40123227', '40123255'], ['40323101', '40323102', '40323103', '40323108', '40323124'], ['40323109', '40323130', '40323135', '40323136', '40323138', '40323144'], ['40323110', '40323113', '40323116', '40323121', '40323151'], ['40323111', '40323117', '40323118', '40323119', '40323120', '40323122'], ['40323112', '40323133', '40323147', '40323152', '40323155', '40323156'], ['40323123', '40323131', '40323137', '40323143', '40323145', '40323154'], ['40323125', '40323126', '40323132', '40323149', '40323150', '40323153'], ['40323127', '40323128', '40323139', '40323141']]

# 第 i 組學號數列 為 spring_2a[i-1], i 從 1 到 10 共有 10 組
# 若要先照排依組序排座位, 且空字串由下一組可用學號補上
# 以排為先, 然後列, 共有 9 排 7 列可以排座位

seat_by_column = []
for row in range(7):
    for column in range(10):
        # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
        try:
            seat_by_column.append(spring_2a[column][row])
        except:
            seat_by_column.append("")

g.es("去除空白字串前的座位數列:", seat_by_column)

'''
去除空白字串前的座位數列: ['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112', '40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130', '40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105', '40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137', '40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121', '40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216', '40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150', '', '40323146', '40123227', '', '40323144', '', '40323122', '40323156', '40323154', '40323153', '', '', '40123255', '', '', '', '', '', '', '', '']
'''

# 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序

seat_by_column = list(filter(None, seat_by_column))
g.es("以排為主的座位數列:", seat_by_column)

'''
以排為主的座位數列: ['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112', '40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130', '40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105', '40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137', '40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121', '40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216', '40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150', '40323146', '40123227', '40323144', '40323122', '40323156', '40323154', '40323153', '40123255']
'''

# 然後每 7 個取為 1 排, 即可得到以排為主的座位序列

N = 7
column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
g.es("每 7 個組員一排的數列:", column_list)

# 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
seat_dict = {}
for column in range(len(column_list)):
    for i in range(7):
        try:
            seat_dict.update({column_list[column][i]: (column, i)})
        except:
            seat_dict.update({"": ""})
# 根據學號, 排序 dictionary 的方法
import operator
seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)

# 依照學號順序, 列出座位表
for i in range(len(seat_dict_sort)):
    g.es(seat_dict_sort[i])

'''
# 以排為主, 將 seat_by_column 數列, 以每 7 個一排, 組成座位數列
# (1,1), (1, 2) to (9, 1)
每 7 個組員一排的數列: 
[['40023139', '40023234', '40323101', '40323109', '40323110', '40323111', '40323112'], 
['40323123', '40323125', '40323127', '40223153', '40123119', '40323102', '40323130'], 
['40323113', '40323117', '40323133', '40323131', '40323126', '40323128', '40323105'], 
['40123141', '40323103', '40323135', '40323116', '40323118', '40323147', '40323137'], 
['40323132', '40323139', '40323106', '40123149', '40323108', '40323136', '40323121'], 
['40323119', '40323152', '40323143', '40323149', '40323141', '40323107', '40123216'], 
['40323124', '40323138', '40323151', '40323120', '40323155', '40323145', '40323150'], 
['40323146', '40123227', '40323144', '40323122', '40323156', '40323154', '40323153'], 
['40123255']]
# 若要轉換為以 row 為主的電腦教室數列, 以方便 html table 處理, 則需要利用 zip 進行 transpose
# (9,1)-&gt;(1,1), (8,1)-&gt;(1,2) ... (1,1)-&gt;(1,9)
'''

# dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
#g.es(column_list[::-1])

# 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列) 列數補上空白字串 (也就是空位)
# 所以不能使用 zip, 而必須導入 zip_longest 模組方法

from itertools import zip_longest

# zip list of lists, 特別注意下列 column_list 前方的 *

'''
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: 

https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
'''

spring_2a_final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
g.es(spring_2a_final_seat)

# 最後轉成 html table 標註格式

g.es("&lt;table border='1'&gt;")
for row in range(len(spring_2a_final_seat)):
    g.es("&lt;tr&gt;")
    # 因為每一 row 有 9 個位子
    for i in range(9):
        g.es("&lt;td&gt;", spring_2a_final_seat[row][i], "&lt;/td&gt;")
    g.es("&lt;/tr&gt;")
g.es("&lt;/table&gt;")

'''
# 最後得到的結果, 可以利用 html table 顯示在網頁上, 也就是以列為主的座位名單數列
[('40123255', '40323146', '40323124', '40323119', '40323132', '40123141', '40323113', '40323123', '40023139'), 
('', '40123227', '40323138', '40323152', '40323139', '40323103', '40323117', '40323125', '40023234'), 
('', '40323144', '40323151', '40323143', '40323106', '40323135', '40323133', '40323127', '40323101'), 
('', '40323122', '40323120', '40323149', '40123149', '40323116', '40323131', '40223153', '40323109'), 
('', '40323156', '40323155', '40323141', '40323108', '40323118', '40323126', '40123119', '40323110'), 
('', '40323154', '40323145', '40323107', '40323136', '40323147', '40323128', '40323102', '40323111'), 
('', '40323153', '40323150', '40123216', '40323121', '40323137', '40323105', '40323130', '40323112')]
'''


</t>
<t tx="leo.20160225112604.1"></t>
<t tx="leo.20160225112604.7">@language python
# spring_2b 數列即為執行 2016s_g1_w1_task0_2b.py 之後, 所得到的 final_result 數列
# 這個數列是帶有空白字串的分組學號名單數列的組合數列
# readlines() 會以每一行資料當作一個字串, 作為 element, 並輸出一個數列資料
result = []
with open("2016_cd_2b_3.txt", 'r') as f:
    content = f.readlines()
    #g.es(content)
    #g.es(len(content))
    # 逐 element 處理
    for i in range(len(content)):
        for line in content[i].splitlines():
            #g.es(content[i].splitlines())
            result.append(list(line.split(",")))
# result element 即為各分組的學員學號數列資料
# 這裡要先以遞增排序處理各組的數列
group_sorted = []
for i in range(len(result)):
    group_list = sorted(list(filter(None, result[i])))
    group_sorted.append(group_list)
#g.es("各組已經過遞增排序, 各組第一位即為組長:", group_sorted)
# 利用 sorted(), 對全班各組數列所組成的數列進行遞增排序
final_result = sorted(group_sorted)
g.es("分組結果:", final_result)

'''
分組結果: [['40123126', '40123129', '40123131', '40123133', '40123134', '40123144', '40123156'], 
['40123202', '40123214', '40123217', '40123226', '40123232', '40123235', '40123244'], 
['40123224', '40123239', '40123242', '40123250', '40323234', '40323238'], 
['40323201', '40323202', '40323203', '40323205', '40323208'], 
['40323204', '40323206', '40323217', '40323251', '40323253', '40323255'], 
['40323210', '40323211', '40323215', '40323220', '40323235', '40323248'], 
['40323212', '40323216', '40323219', '40323236', '40323254', '40323256'], 
['40323213', '40323226', '40323229', '40323237', '40323239', '40323242', '40323244'], 
['40323214', '40323218', '40323230', '40323231', '40323232', '40323233', '40323250'], 
['40323222', '40323227', '40323241', '40323243', '40323249', '40328242', '40328245'], 
['40323223', '40323225', '40323240', '40323245', '40323247', '40323252']]
'''

spring_2b =  final_result

# 第 i 組學號數列 為 spring_2a[i-1], i 從 1 到 11 共有 11 組
# 若要先照排依組序排座位, 且空字串由下一組可用學號補上
# 以排為先, 然後列, 共有 9 排 8 列可以排座位

seat_by_column = []
for row in range(7):
    for column in range(11):
        # 因為各分組數列的長度並不相同, 但是最長的有 8 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
        try:
            seat_by_column.append(spring_2b[column][row])
        except:
            seat_by_column.append("")

g.es("去除空白字串前的座位數列:", seat_by_column)

'''
去除空白字串前的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '', '', '', '', '', '40323244', '40323250', '40328245', '']
'''

# 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序

seat_by_column = list(filter(None, seat_by_column))
# 以排為主的座位數列
#g.es("以排為主的座位數列:", seat_by_column)

'''
以排為主的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '40323244', '40323250', '40328245']
'''

# 然後每 8 個取為 1 排, 即可得到以排為主的座位序列

N = 8
column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
# 列出每 8 個組員一排的數列
#g.es("每 8 個組員一排的數列:", column_list)
# 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
seat_dict = {}
for column in range(len(column_list)):
    for i in range(8):
        try:
            seat_dict.update({column_list[column][i]: (column, i)})
        except:
            seat_dict.update({"": ""})
# 根據學號, 排序 dictionary 的方法
import operator
seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)

# 依照學號順序, 列出座位表
for i in range(len(seat_dict_sort)):
    g.es(seat_dict_sort[i])

'''
# 以排為主, 將 seat_by_column 數列, 以每 8 個一排, 組成座位數列
# (1,1), (1, 2) to (9, 1)
每 8 個組員一排的數列: 
[['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213'], 
['40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206'], 
['40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217'], 
['40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241'], 
['40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236'], 
['40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208'], 
['40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144'], 
['40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242'], 
['40323252', '40123156', '40123244', '40323244', '40323250', '40328245']]
# 若要轉換為以 row 為主的電腦教室數列, 以方便 html table 處理, 則需要利用 zip 進行 transpose
# (9,1)-&gt;(1,1), (8,1)-&gt;(1,2) ... (1,1)-&gt;(1,9)
'''

# dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
#g.es(column_list[::-1])

# 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列) 列數補上空白字串 (也就是空位)
# 所以不能使用 zip, 而必須導入 zip_longest 模組方法

from itertools import zip_longest

# zip list of lists, 特別注意下列 column_list 前方的 *

'''
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: 

https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
'''

spring_2b_final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
# 列出最後的座位
#g.es(spring_2b_final_seat)

# 最後轉成 html table 標註格式

g.es("&lt;table&gt;")
for row in range(len(spring_2b_final_seat)):
    g.es("&lt;tr&gt;")
    # 因為每一 row 有 9 個位子
    for i in range(9):
        g.es("&lt;td&gt;", spring_2b_final_seat[row][i], "&lt;/td&gt;")
    g.es("&lt;/tr&gt;")
g.es("&lt;/table&gt;")
    

'''
# 最後得到的結果, 可以利用 html table 顯示在網頁上, 也就是以列為主的座位名單數列
[('40323252', '40123235', '40323253', '40323237', '40323240', '40123242', '40323211', '40323214', '40123126'), ('40123156', '40323238', '40323235', '40323231', '40123133', '40323203', '40323216', '40323222', '40123202'), ('40123244', '40323255', '40323254', '40323243', '40123226', '40323217', '40323226', '40323223', '40123224'), ('40323244', '40323248', '40323239', '40323245', '40123250', '40323215', '40323218', '40123129', '40323201'), ('40323250', '40323256', '40323232', '40123134', '40323205', '40323219', '40323227', '40123214', '40323204'), ('40328245', '40323242', '40323249', '40123232', '40323251', '40323229', '40323225', '40123239', '40323210'), ('', '40323233', '40323247', '40323234', '40323220', '40323230', '40123131', '40323202', '40323212'), ('', '40328242', '40123144', '40323208', '40323236', '40323241', '40123217', '40323206', '40323213')]
'''


</t>
<t tx="leo.20160225113228.1">第1組: ['40123126', '40123129', '40123131', '40123133', '40123134', '40123144', '40123156']
第2組: ['40123202', '40123214', '40123217', '40123226', '40123232', '40123235', '40123244']
第3組: ['40123224', '40123239', '40123242', '40123250', '40323234', '40323238']
第4組: ['40323201', '40323202', '40323203', '40323205', '40323208']
第5組: ['40323204', '40323206', '40323217', '40323251', '40323253', '40323255']
第6組: ['40323210', '40323211', '40323215', '40323220', '40323235', '40323248']
第7組: ['40323212', '40323216', '40323219', '40323236', '40323254', '40323256']
第8組: ['40323213', '40323226', '40323229', '40323237', '40323239', '40323242', '40323244']
第9組: ['40323214', '40323218', '40323230', '40323231', '40323232', '40323233', '40323250']
第10組: ['40323222', '40323227', '40323241', '40323243', '40323249', '40328242', '40328245']
第11組: ['40323223', '40323225', '40323240', '40323245', '40323247', '40323252']</t>
</tnodes>
</leo_file>
